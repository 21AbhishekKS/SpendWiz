package com.spendwiz.app.utils

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.RectF
import android.graphics.Typeface
import android.graphics.pdf.PdfDocument
import com.spendwiz.app.Database.money.Money
import com.spendwiz.app.Database.money.TransactionType
import com.spendwiz.app.R
import org.threeten.bp.LocalDate
import org.threeten.bp.format.DateTimeFormatter
import org.threeten.bp.format.TextStyle
import java.io.File
import java.io.FileOutputStream
import java.util.Locale

object PdfGenerator {

    private const val PAGE_WIDTH = 595
    private const val PAGE_HEIGHT = 842
    private const val MARGIN = 30f

    suspend fun generateEnhancedMonthlyReport(
        context: Context,
        file: File,
        monthName: String,
        year: String,
        transactions: List<Money>
    ) {
        // --- DATA PREPARATION ---
        val totalIncome = transactions.filter { it.type == TransactionType.INCOME }.sumOf { it.amount }
        val totalExpense = transactions.filter { it.type == TransactionType.EXPENSE }.sumOf { it.amount }
        val netSavings = totalIncome - totalExpense
        val topSpendingCategories = transactions
            .filter { it.type == TransactionType.EXPENSE && it.category != null }
            .groupBy { it.category!! }
            .mapValues { entry -> entry.value.sumOf { it.amount } }
            .entries
            .sortedByDescending { it.value }
            .take(5)

        val logoBitmap = BitmapFactory.decodeResource(context.resources, R.drawable.splash)

        // --- PDF DOCUMENT SETUP ---
        val document = PdfDocument()
        val pageInfo = PdfDocument.PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, 1).create()
        var page = document.startPage(pageInfo)
        var canvas = page.canvas
        var yPosition = MARGIN
        var currentPageNumber = 1

        // --- PAINTS AND STYLES ---
        val titleTypeface = Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD)
        val boldTypeface = Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD)
        val regularTypeface = Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL)
        val titlePaint = Paint().apply { color = android.graphics.Color.BLACK; textSize = 18f; typeface = titleTypeface }
        val headerPaint = Paint().apply { color = android.graphics.Color.DKGRAY; textSize = 11f; typeface = regularTypeface }
        val sectionTitlePaint = Paint().apply { color = android.graphics.Color.BLACK; textSize = 14f; typeface = boldTypeface }
        val cardPaint = Paint().apply { color = android.graphics.Color.rgb(245, 245, 245); style = Paint.Style.FILL }
        val cardBorderPaint = Paint().apply { color = android.graphics.Color.LTGRAY; style = Paint.Style.STROKE; strokeWidth = 1f }
        val cardTitlePaint = Paint().apply { color = android.graphics.Color.DKGRAY; textSize = 10f; textAlign = Paint.Align.CENTER; typeface = regularTypeface }
        val cardAmountPaint = Paint().apply { color = android.graphics.Color.BLACK; textSize = 16f; typeface = boldTypeface; textAlign = Paint.Align.CENTER }
        val bodyPaint = Paint().apply { color = android.graphics.Color.DKGRAY; textSize = 10f; typeface = regularTypeface }
        val tableHeaderPaint = Paint(bodyPaint).apply { typeface = boldTypeface }
        val linePaint = Paint().apply { color = android.graphics.Color.LTGRAY; strokeWidth = 1f }
        val tableRowAltPaint = Paint().apply { color = android.graphics.Color.argb(20, 0, 0, 0); style = Paint.Style.FILL }

        fun drawFooter(canvasLocal: Canvas, pageNumber: Int) {
            val footerText = "Report generated by SpendWiz • Page $pageNumber"
            val footerPaint = Paint(bodyPaint)
            footerPaint.textAlign = Paint.Align.CENTER
            val footerX = PAGE_WIDTH / 2f
            val footerY = PAGE_HEIGHT - MARGIN / 2f
            canvasLocal.drawText(footerText, footerX, footerY, footerPaint)
        }

        // --- 1. HEADER SECTION ---
        val scaledLogo = Bitmap.createScaledBitmap(logoBitmap, 60, 60, true)
        canvas.drawBitmap(scaledLogo, MARGIN, yPosition, null)
        canvas.drawText("Monthly Expense Report", 120f, yPosition + 35, titlePaint)
        yPosition += 80
        val period = "Period: $monthName"
        val generatedDate = "Generated on: ${LocalDate.now().format(DateTimeFormatter.ofPattern("MMMM d, yyyy"))}"
        canvas.drawText(period, MARGIN, yPosition, headerPaint)
        yPosition += 15
        canvas.drawText(generatedDate, MARGIN, yPosition, headerPaint)
        yPosition += 20
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 2. FINANCIAL SUMMARY SECTION ---
        canvas.drawText("Financial Summary", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        val cardWidth = (PAGE_WIDTH - 2 * MARGIN - 20) / 3
        val cardHeight = 60f
        var xPosition = MARGIN
        drawSummaryCard(canvas, xPosition, yPosition, cardWidth, cardHeight, "Total Income", "₹${"%.2f".format(totalIncome)}", cardPaint, cardBorderPaint, cardTitlePaint, cardAmountPaint)
        xPosition += cardWidth + 10
        drawSummaryCard(canvas, xPosition, yPosition, cardWidth, cardHeight, "Total Expenses", "₹${"%.2f".format(totalExpense)}", cardPaint, cardBorderPaint, cardTitlePaint, cardAmountPaint)
        xPosition += cardWidth + 10
        drawSummaryCard(canvas, xPosition, yPosition, cardWidth, cardHeight, "NET SAVINGS", "₹${"%.2f".format(netSavings)}", cardPaint, cardBorderPaint, cardTitlePaint, cardAmountPaint)
        yPosition += cardHeight + 20
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 3. CUSTOM INCOME VS EXPENSE PIE CHART ---
        canvas.drawText("Income vs. Expense Breakdown", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        val incomePaint = Paint().apply { color = android.graphics.Color.rgb(76, 175, 80); style = Paint.Style.FILL }
        val expensePaint = Paint().apply { color = android.graphics.Color.rgb(244, 67, 54); style = Paint.Style.FILL }
        val totalFinancials = totalIncome + totalExpense
        val incomeAngle = if (totalFinancials > 0) (totalIncome / totalFinancials * 360f).toFloat() else 0f
        val expenseAngle = if (totalFinancials > 0) (totalExpense / totalFinancials * 360f).toFloat() else 360f
        val chartSize = 180f
        val chartLeft = MARGIN + 80
        val chartTop = yPosition
        val pieChartRect = RectF(chartLeft, chartTop, chartLeft + chartSize, chartTop + chartSize)
        if (totalFinancials > 0) {
            canvas.drawArc(pieChartRect, -90f, incomeAngle, true, incomePaint)
            canvas.drawArc(pieChartRect, -90f + incomeAngle, expenseAngle, true, expensePaint)
        } else {
            val emptyPaint = Paint().apply { color = android.graphics.Color.LTGRAY; style = Paint.Style.FILL }
            canvas.drawOval(pieChartRect, emptyPaint)
            val noDataPaint = Paint(cardTitlePaint).apply { textSize = 12f }
            canvas.drawText("No Data", chartLeft + chartSize / 2, chartTop + chartSize / 2 + 5, noDataPaint)
        }
        val legendX = chartLeft + chartSize + 60
        var legendY = yPosition + (chartSize / 2f) - 20
        canvas.drawRect(legendX, legendY, legendX + 20, legendY + 20, incomePaint)
        val incomeLegendText = "Income: ₹${"%.2f".format(totalIncome)}"
        canvas.drawText(incomeLegendText, legendX + 30, legendY + 15, bodyPaint)
        legendY += 30
        canvas.drawRect(legendX, legendY, legendX + 20, legendY + 20, expensePaint)
        val expenseLegendText = "Expense: ₹${"%.2f".format(totalExpense)}"
        canvas.drawText(expenseLegendText, legendX + 30, legendY + 15, bodyPaint)
        yPosition += chartSize + 30
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 4. TOP SPENDING SECTION ---
        canvas.drawText("Top Spending by Category", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        topSpendingCategories.forEachIndexed { index, item ->
            val categoryName = item.key
            val amount = item.value
            val percentage = if (totalExpense > 0) (amount / totalExpense * 100) else 0.0
            val text = "${index + 1}. ${categoryName.take(25)}"

            val rowTop = yPosition - 12f
            val rowBottom = yPosition + 6f
            if (index % 2 != 0) {
                canvas.drawRect(RectF(MARGIN, rowTop, PAGE_WIDTH - MARGIN, rowBottom), tableRowAltPaint)
            }

            canvas.drawText(text, MARGIN + 4, yPosition, bodyPaint)
            val amountText = "₹${"%.2f".format(amount)} (${"%.1f".format(percentage)}%)"
            val amountX = PAGE_WIDTH - MARGIN - bodyPaint.measureText(amountText)
            canvas.drawText(amountText, amountX, yPosition, bodyPaint)
            yPosition += 20

            if (yPosition > PAGE_HEIGHT - MARGIN - 120) {
                drawFooter(canvas, currentPageNumber)
                document.finishPage(page)
                currentPageNumber++
                page = document.startPage(pageInfo)
                canvas = page.canvas
                yPosition = MARGIN
            }
        }
        yPosition += 10
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 5. TRANSACTION HISTORY ---
        canvas.drawText("Transaction History", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        canvas.drawText("Date", MARGIN, yPosition, tableHeaderPaint)
        canvas.drawText("Description", 110f, yPosition, tableHeaderPaint)
        canvas.drawText("Category", 350f, yPosition, tableHeaderPaint)
        canvas.drawText("Amount", 500f, yPosition, tableHeaderPaint)
        yPosition += 20

        for ((index, transaction) in transactions.withIndex()) {
            if (yPosition > PAGE_HEIGHT - MARGIN - 50) {
                drawFooter(canvas, currentPageNumber)
                document.finishPage(page)
                currentPageNumber++
                page = document.startPage(pageInfo)
                canvas = page.canvas
                yPosition = MARGIN
            }

            if (index % 2 != 0) {
                canvas.drawRect(RectF(MARGIN, yPosition - 12, PAGE_WIDTH - MARGIN, yPosition + 4), tableRowAltPaint)
            }

            canvas.drawText(transaction.date, MARGIN, yPosition, bodyPaint)
            canvas.drawText(transaction.description.take(40), 110f, yPosition, bodyPaint)
            canvas.drawText(transaction.category?.take(15) ?: "N/A", 350f, yPosition, bodyPaint)
            val amountStr = "₹${"%.2f".format(transaction.amount)}"
            canvas.drawText(amountStr, 500f, yPosition, bodyPaint)
            yPosition += 15
        }

        drawFooter(canvas, currentPageNumber)
        document.finishPage(page)

        try {
            FileOutputStream(file).use { document.writeTo(it) }
        } finally {
            document.close()
        }
    }

    suspend fun generateEnhancedYearlyReport(
        context: Context,
        file: File,
        year: String,
        transactions: List<Money>
    ) {
        // --- DATA PREPARATION ---
        val totalIncome = transactions.filter { it.type == TransactionType.INCOME }.sumOf { it.amount }
        val totalExpense = transactions.filter { it.type == TransactionType.EXPENSE }.sumOf { it.amount }
        val netSavings = totalIncome - totalExpense
        val topSpendingCategories = transactions
            .filter { it.type == TransactionType.EXPENSE && it.category != null }
            .groupBy { it.category!! }
            .mapValues { entry -> entry.value.sumOf { it.amount } }
            .entries
            .sortedByDescending { it.value }
            .take(5)

        val transactionsByMonth = transactions.groupBy {
            try {
                it.date.split("/")[1].toInt() // Assumes "dd/MM/yyyy"
            } catch (e: Exception) {
                1
            }
        }

        val logoBitmap = BitmapFactory.decodeResource(context.resources, R.drawable.splash)
        val document = PdfDocument()
        val pageInfo = PdfDocument.PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, 1).create()
        var page = document.startPage(pageInfo)
        var canvas = page.canvas
        var yPosition = MARGIN
        var currentPageNumber = 1

        // --- PAINTS AND STYLES (Same as monthly) ---
        val titleTypeface = Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD)
        val boldTypeface = Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD)
        val regularTypeface = Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL)
        val titlePaint = Paint().apply { color = android.graphics.Color.BLACK; textSize = 18f; typeface = titleTypeface }
        val headerPaint = Paint().apply { color = android.graphics.Color.DKGRAY; textSize = 11f; typeface = regularTypeface }
        val sectionTitlePaint = Paint().apply { color = android.graphics.Color.BLACK; textSize = 14f; typeface = boldTypeface }
        val cardPaint = Paint().apply { color = android.graphics.Color.rgb(245, 245, 245); style = Paint.Style.FILL }
        val cardBorderPaint = Paint().apply { color = android.graphics.Color.LTGRAY; style = Paint.Style.STROKE; strokeWidth = 1f }
        val cardTitlePaint = Paint().apply { color = android.graphics.Color.DKGRAY; textSize = 10f; textAlign = Paint.Align.CENTER; typeface = regularTypeface }
        val cardAmountPaint = Paint().apply { color = android.graphics.Color.BLACK; textSize = 16f; typeface = boldTypeface; textAlign = Paint.Align.CENTER }
        val bodyPaint = Paint().apply { color = android.graphics.Color.DKGRAY; textSize = 10f; typeface = regularTypeface }
        val tableHeaderPaint = Paint(bodyPaint).apply { typeface = boldTypeface }
        val linePaint = Paint().apply { color = android.graphics.Color.LTGRAY; strokeWidth = 1f }
        val tableRowAltPaint = Paint().apply { color = android.graphics.Color.argb(20, 0, 0, 0); style = Paint.Style.FILL }
        val monthSubHeaderPaint = Paint(tableHeaderPaint).apply { textSize = 11f }


        fun startNewPage() {
            document.finishPage(page)
            page = document.startPage(pageInfo)
            canvas = page.canvas
            currentPageNumber++
            yPosition = MARGIN
        }

        fun drawFooter(canvasLocal: Canvas, pageNumber: Int) {
            val footerText = "Report generated by SpendWiz • Page $pageNumber"
            val footerPaint = Paint(bodyPaint).apply { textAlign = Paint.Align.CENTER }
            canvasLocal.drawText(footerText, PAGE_WIDTH / 2f, PAGE_HEIGHT - MARGIN / 2f, footerPaint)
        }

        // --- 1. HEADER SECTION ---
        val scaledLogo = Bitmap.createScaledBitmap(logoBitmap, 60, 60, true)
        canvas.drawBitmap(scaledLogo, MARGIN, yPosition, null)
        canvas.drawText("Yearly Expense Report", 120f, yPosition + 35, titlePaint)
        yPosition += 80
        val period = "$year"
        val generatedDate = "Generated on: ${LocalDate.now().format(DateTimeFormatter.ofPattern("MMMM d, yyyy"))}"
        canvas.drawText(period, MARGIN, yPosition, headerPaint)
        yPosition += 15
        canvas.drawText(generatedDate, MARGIN, yPosition, headerPaint)
        yPosition += 20
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 2. FINANCIAL SUMMARY (YEARLY) ---
        canvas.drawText("Yearly Financial Summary", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        val cardWidth = (PAGE_WIDTH - 2 * MARGIN - 20) / 3
        val cardHeight = 60f
        var xPosition = MARGIN
        drawSummaryCard(canvas, xPosition, yPosition, cardWidth, cardHeight, "Total Income", "₹${"%.2f".format(totalIncome)}", cardPaint, cardBorderPaint, cardTitlePaint, cardAmountPaint)
        xPosition += cardWidth + 10
        drawSummaryCard(canvas, xPosition, yPosition, cardWidth, cardHeight, "Total Expenses", "₹${"%.2f".format(totalExpense)}", cardPaint, cardBorderPaint, cardTitlePaint, cardAmountPaint)
        xPosition += cardWidth + 10
        drawSummaryCard(canvas, xPosition, yPosition, cardWidth, cardHeight, "NET SAVINGS", "₹${"%.2f".format(netSavings)}", cardPaint, cardBorderPaint, cardTitlePaint, cardAmountPaint)
        yPosition += cardHeight + 20
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 3. PIE CHART (YEARLY) ---
        canvas.drawText("Yearly Income vs. Expense", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        val incomePaint = Paint().apply { color = android.graphics.Color.rgb(76, 175, 80); style = Paint.Style.FILL }
        val expensePaint = Paint().apply { color = android.graphics.Color.rgb(244, 67, 54); style = Paint.Style.FILL }
        val totalFinancials = totalIncome + totalExpense
        val incomeAngle = if (totalFinancials > 0) (totalIncome / totalFinancials * 360f).toFloat() else 0f
        val expenseAngle = if (totalFinancials > 0) (totalExpense / totalFinancials * 360f).toFloat() else 360f
        val chartSize = 150f
        val chartLeft = MARGIN + 100
        val chartTop = yPosition
        val pieChartRect = RectF(chartLeft, chartTop, chartLeft + chartSize, chartTop + chartSize)
        if (totalFinancials > 0) {
            canvas.drawArc(pieChartRect, -90f, incomeAngle, true, incomePaint)
            canvas.drawArc(pieChartRect, -90f + incomeAngle, expenseAngle, true, expensePaint)
        }
        val legendX = chartLeft + chartSize + 50
        var legendY = yPosition + (chartSize / 2f) - 20
        canvas.drawRect(legendX, legendY, legendX + 20, legendY + 20, incomePaint)
        canvas.drawText("Income: ₹${"%.2f".format(totalIncome)}", legendX + 30, legendY + 15, bodyPaint)
        legendY += 30
        canvas.drawRect(legendX, legendY, legendX + 20, legendY + 20, expensePaint)
        canvas.drawText("Expense: ₹${"%.2f".format(totalExpense)}", legendX + 30, legendY + 15, bodyPaint)
        yPosition += chartSize + 30
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 4. MONTHLY OVERVIEW TABLE ---
        canvas.drawText("Monthly Overview", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25
        canvas.drawText("Month", MARGIN, yPosition, tableHeaderPaint)
        canvas.drawText("Income", 200f, yPosition, tableHeaderPaint)
        canvas.drawText("Expense", 350f, yPosition, tableHeaderPaint)
        canvas.drawText("Net", 480f, yPosition, tableHeaderPaint)
        yPosition += 20
        for (month in 1..12) {
            val monthTransactions = transactionsByMonth[month] ?: emptyList()
            val monthIncome = monthTransactions.filter { it.type == TransactionType.INCOME }.sumOf { it.amount }
            val monthExpense = monthTransactions.filter { it.type == TransactionType.EXPENSE }.sumOf { it.amount }
            val monthName = org.threeten.bp.Month.of(month).getDisplayName(TextStyle.FULL, Locale.getDefault())
            if (month % 2 != 0) canvas.drawRect(RectF(MARGIN, yPosition - 12, PAGE_WIDTH - MARGIN, yPosition + 4), tableRowAltPaint)
            canvas.drawText(monthName, MARGIN, yPosition, bodyPaint)
            canvas.drawText("₹${"%.2f".format(monthIncome)}", 200f, yPosition, bodyPaint)
            canvas.drawText("₹${"%.2f".format(monthExpense)}", 350f, yPosition, bodyPaint)
            canvas.drawText("₹${"%.2f".format(monthIncome - monthExpense)}", 480f, yPosition, bodyPaint)
            yPosition += 15
        }
        yPosition += 10
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, linePaint)
        yPosition += 30

        // --- 5. TRANSACTION HISTORY (Grouped by Month) ---
        drawFooter(canvas, currentPageNumber)
        startNewPage()
        canvas.drawText("Full Transaction History", MARGIN, yPosition, sectionTitlePaint)
        yPosition += 25

        for (month in 1..12) {
            val monthTransactions = transactionsByMonth[month] ?: continue
            if (monthTransactions.isEmpty()) continue

            if (yPosition > PAGE_HEIGHT - MARGIN - 80) {
                drawFooter(canvas, currentPageNumber)
                startNewPage()
            }
            val monthName = org.threeten.bp.Month.of(month).getDisplayName(TextStyle.FULL, Locale.getDefault())
            canvas.drawText("--- $monthName Transactions ---", MARGIN, yPosition, monthSubHeaderPaint)
            yPosition += 25
            canvas.drawText("Date", MARGIN, yPosition, tableHeaderPaint)
            canvas.drawText("Description", 110f, yPosition, tableHeaderPaint)
            canvas.drawText("Category", 350f, yPosition, tableHeaderPaint)
            canvas.drawText("Amount", 500f, yPosition, tableHeaderPaint)
            yPosition += 20

            for ((index, transaction) in monthTransactions.withIndex()) {
                if (yPosition > PAGE_HEIGHT - MARGIN - 50) {
                    drawFooter(canvas, currentPageNumber)
                    startNewPage()
                }
                if (index % 2 != 0) canvas.drawRect(RectF(MARGIN, yPosition - 12, PAGE_WIDTH - MARGIN, yPosition + 4), tableRowAltPaint)
                canvas.drawText(transaction.date, MARGIN, yPosition, bodyPaint)
                canvas.drawText(transaction.description.take(40), 110f, yPosition, bodyPaint)
                canvas.drawText(transaction.category?.take(15) ?: "N/A", 350f, yPosition, bodyPaint)
                canvas.drawText("₹${"%.2f".format(transaction.amount)}", 500f, yPosition, bodyPaint)
                yPosition += 15
            }
            yPosition += 15
        }

        drawFooter(canvas, currentPageNumber)
        document.finishPage(page)

        try {
            FileOutputStream(file).use { document.writeTo(it) }
        } finally {
            document.close()
        }
    }

    private fun drawSummaryCard(
        canvas: Canvas, x: Float, y: Float, width: Float, height: Float,
        title: String, amount: String,
        bgPaint: Paint, borderPaint: Paint, titlePaint: Paint, amountPaint: Paint
    ) {
        val rect = RectF(x, y, x + width, y + height)
        canvas.drawRoundRect(rect, 8f, 8f, bgPaint)
        canvas.drawRoundRect(rect, 8f, 8f, borderPaint)
        canvas.drawText(title, x + width / 2, y + 20, titlePaint)
        canvas.drawText(amount, x + width / 2, y + 45, amountPaint)
    }
}